{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNqXnrpk6ZMdXgeqDq4VU+n",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aunghlaingtun/hdb_price_prediction/blob/main/streamlit_app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VNmaS647I658"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import joblib\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import mlflow\n",
        "import mlflow.sklearn\n",
        "\n",
        "# -------------------------------\n",
        "# Load trained scaler and model\n",
        "# -------------------------------\n",
        "# Replace with your paths or MLflow run_id/artifact URI\n",
        "scaler_path = \"scaler.pkl\"\n",
        "model_uri = \"runs:/<RUN_ID>/model\"  # Replace <RUN_ID> with your final MLflow run_id\n",
        "\n",
        "scaler = joblib.load(scaler_path)\n",
        "best_model = mlflow.sklearn.load_model(model_uri)\n",
        "\n",
        "# -------------------------------\n",
        "# App title\n",
        "# -------------------------------\n",
        "st.title(\"üè† HDB Resale Price Prediction\")\n",
        "st.write(\"Predict resale price using the best trained linear model\")\n",
        "\n",
        "# -------------------------------\n",
        "# Feature inputs\n",
        "# -------------------------------\n",
        "st.sidebar.header(\"Input Features\")\n",
        "\n",
        "def user_input_features():\n",
        "    floor_area_sqm = st.sidebar.number_input(\"Floor Area (sqm)\", 20, 300, 100)\n",
        "    remaining_lease_years = st.sidebar.number_input(\"Remaining Lease Years\", 1, 99, 70)\n",
        "    min_storey = st.sidebar.number_input(\"Min Storey\", 1, 50, 1)\n",
        "    max_storey = st.sidebar.number_input(\"Max Storey\", 1, 50, 10)\n",
        "    mid_storey = st.sidebar.number_input(\"Mid Storey\", 1, 50, 5)\n",
        "    property_age = st.sidebar.number_input(\"Property Age\", 0, 100, 20)\n",
        "    latitude = st.sidebar.number_input(\"Latitude\", 1.2, 1.5, 1.37)\n",
        "    longitude = st.sidebar.number_input(\"Longitude\", 103.6, 104.0, 103.85)\n",
        "    cpi = st.sidebar.number_input(\"CPI\", 90.0, 150.0, 105.0)\n",
        "    distance_to_mrt = st.sidebar.number_input(\"Distance to MRT (km)\", 0.0, 10.0, 1.0)\n",
        "    year = st.sidebar.number_input(\"Year\", 2000, 2030, 2025)\n",
        "    month_num = st.sidebar.number_input(\"Month\", 1, 12, 1)\n",
        "\n",
        "    # Categorical variables\n",
        "    town = st.sidebar.selectbox(\"Town\", [\"ANG MO KIO\", \"BEDOK\", \"BISHAN\", \"BUKIT BATOK\", \"CENTRAL\"])\n",
        "    flat_type = st.sidebar.selectbox(\"Flat Type\", [\"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\"])\n",
        "    flat_model = st.sidebar.selectbox(\"Flat Model\", [\"Model A\", \"Model B\", \"Model C\"])\n",
        "    storey_range = st.sidebar.selectbox(\"Storey Range\", [\"01 TO 03\", \"04 TO 06\", \"07 TO 09\"])\n",
        "\n",
        "    data = {\n",
        "        'floor_area_sqm': floor_area_sqm,\n",
        "        'remaining_lease_years': remaining_lease_years,\n",
        "        'min_storey': min_storey,\n",
        "        'max_storey': max_storey,\n",
        "        'mid_storey': mid_storey,\n",
        "        'property_age': property_age,\n",
        "        'latitude': latitude,\n",
        "        'longitude': longitude,\n",
        "        'cpi': cpi,\n",
        "        'distance_to_mrt': distance_to_mrt,\n",
        "        'year': year,\n",
        "        'month_num': month_num,\n",
        "        'town': town,\n",
        "        'flat_type': flat_type,\n",
        "        'flat_model': flat_model,\n",
        "        'storey_range': storey_range\n",
        "    }\n",
        "    return pd.DataFrame(data, index=[0])\n",
        "\n",
        "input_df = user_input_features()\n",
        "\n",
        "# -------------------------------\n",
        "# Preprocessing\n",
        "# -------------------------------\n",
        "# Apply same encoding as training\n",
        "# Replace with your LabelEncoders from training\n",
        "for col in ['town', 'flat_type', 'flat_model', 'storey_range']:\n",
        "    if col in input_df.columns:\n",
        "        input_df[col] = input_df[col].astype(str)  # ensure string\n",
        "\n",
        "# Select numeric features\n",
        "numeric_features = ['floor_area_sqm', 'remaining_lease_years', 'min_storey', 'max_storey',\n",
        "                    'mid_storey', 'property_age', 'latitude', 'longitude', 'cpi',\n",
        "                    'distance_to_mrt', 'year', 'month_num']\n",
        "\n",
        "X_input_scaled = scaler.transform(input_df[numeric_features])\n",
        "\n",
        "# -------------------------------\n",
        "# Prediction\n",
        "# -------------------------------\n",
        "predicted_price = best_model.predict(X_input_scaled)\n",
        "st.subheader(\"üí∞ Predicted Resale Price\")\n",
        "st.write(f\"${predicted_price[0]:,.2f}\")\n",
        "\n",
        "# -------------------------------\n",
        "# Optional: Feature importance\n",
        "# -------------------------------\n",
        "if hasattr(best_model, 'coef_'):\n",
        "    coef_df = pd.DataFrame({\n",
        "        'Feature': numeric_features,\n",
        "        'Coefficient': best_model.coef_\n",
        "    }).sort_values('Coefficient', key=lambda x: abs(x), ascending=False)\n",
        "\n",
        "    st.subheader(\"üìä Top Feature Importance\")\n",
        "    st.bar_chart(coef_df.set_index('Feature')['Coefficient'])\n"
      ]
    }
  ]
}